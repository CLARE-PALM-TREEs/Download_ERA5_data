class Variables:
    '''
        A class to store information about the ERA5 reanalysis variables available for
        download.

        Refer to https://confluence.ecmwf.int/display/CKB/ERA5%3A+data+documentation

    '''

    def __init__(self):

        self.var_dic = {}
        self._append_table_1()
        self._append_table_2()
        self._append_table_3()
        self._append_table_4()
        self._append_table_5()
        self._append_table_6()
        self._append_table_7()
        self._append_table_9()

    def _append_table_1(self):

        # Table 1: surface and single level parameters: invariants (in time)
        dataset_version = 'single-levels'
        time_invariant = True

        names = ['lake_cover',
                 'lake_depth',
                 'low_vegetation_cover',
                 'high_vegetation_cover',
                 'type_of_low_vegetation',
                 'type_of_high_vegetation',
                 'soil_type',
                 'standard_deviation_of_filtered_subgrid_orography',
                 'geopotential',
                 'standard_deviation_of_orography',
                 'anisotropy_of_sub_gridscale_orography',
                 'angle_of_sub_gridscale_orography',
                 'slope_of_sub_gridscale_orography',
                 'land_sea_mask'
                 ]

        abbreviations = ['cl',
                         'dl',
                         'cvl',
                         'cvh',
                         'tvl',
                         'tvh',
                         'slt',
                         'sdfor',
                         'z',
                         'sdor',
                         'isor',
                         'anor',
                         'slor',
                         'lsm'
                         ]

        units = ['(0 - 1)',
                 'm',
                 '(0 - 1)',
                 '(0 - 1)',
                 '~',
                 '~',
                 '~',
                 'm',
                 'm**2 s**-2',
                 '~',
                 '~',
                 'radians',
                 '~',
                 '(0 - 1)',
                 ]

        for name, abbreviation, unit, in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)

    def _append_table_2(self):

        # Table 2: surface and single level parameters: instantaneous
        dataset_version = 'single-levels'
        time_invariant = False

        names = ['convective_inhibition',
                 'friction_velocity',
                 'lake_mix_layer_temperature',
                 'lake_mix_layer_depth',
                 'lake_bottom_temperature',
                 'lake_total_layer_temperature',
                 'lake_shape_factor',
                 'lake_ice_temperature',
                 'lake_ice_depth',
                 'uv_visible_albedo_for_direct_radiation',
                 'minimum_vertical_gradient_of_refractivity_inside_trapping_layer',
                 'uv_visible_albedo_for_diffuse_radiation',
                 'mean_vertical_gradient_of_refractivity_inside_trapping_layer',
                 'near_ir_albedo_for_direct_radiation',
                 'duct_base_height',
                 'near_ir_albedo_for_diffuse_radiation',
                 'trapping_layer_base_height',
                 'trapping_layer_top_height',
                 'cloud_base_height',
                 'zero_degree_level',
                 'instantaneous_10m_wind_gust',
                 'sea-ice_cover',
                 'snow_albedo',
                 'snow_density',
                 'sea_surface_temperature',
                 'ice_temperature_layer_1',
                 'ice_temperature_layer_2',
                 'ice_temperature_layer_3',
                 'ice_temperature_layer_4',
                 'volumetric_soil_water_layer_1',
                 'volumetric_soil_water_layer_2',
                 'volumetric_soil_water_layer_3',
                 'volumetric_soil_water_layer_4',
                 'convective_available_potential_energy',
                 'leaf_area_index_low_vegetation',
                 'leaf_area_index_high_vegetation',
                 '10m_u-component_of_neutral_wind',
                 '10m_v-component_of_neutral_wind',
                 'surface_pressure',
                 'soil_temperature_level_1',
                 'snow_depth',
                 'charnock',
                 'mean_sea_level_pressure',
                 'boundary_layer_height',
                 'total_cloud_cover',
                 '10m_u-component_of_wind',
                 '10m_v-component_of_wind',
                 '2m_temperature',
                 '2m_dewpoint_temperature',
                 'soil_temperature_level_2',
                 'soil_temperature_level_3',
                 'low_cloud_cover',
                 'medium_cloud_cover',
                 'high_cloud_cover',
                 'skin_reservoir_content',
                 'instantaneous_large_scale_surface_precipitation_fraction',
                 'convective_rain_rate',
                 'large_scale_rain_rate',
                 'convective_snowfall_rate_water_equivalent',
                 'large_scale_snowfall_rate_water_equivalent',
                 'instantaneous_eastward_turbulent_surface_stress',
                 'instantaneous_northward_turbulent_surface_stress',
                 'instantaneous_surface_sensible_heat_flux',
                 'instantaneous_moisture_flux',
                 'skin_temperature',
                 'soil_temperature_level_4',
                 'temperature_of_snow_layer',
                 'forecast_albedo',
                 'forecast_surface_roughness',
                 'forecast_logarithm_of_surface_roughness_for_heat',
                 '100m_u-component_of_wind',
                 '100m_v-component_of_wind',
                 'precipitation_type',
                 'k_index',
                 'total_totals_index'
                 ]

        abbreviations = ['cin',
                         'zust',
                         'lmlt',
                         'lmld',
                         'lblt',
                         'ltlt',
                         'lshf',
                         'lict',
                         'licd',
                         'aluvp',
                         'dndzn',
                         'aluvd',
                         'dndza',
                         'alnip',
                         'dctb',
                         'alnid',
                         'tplb',
                         'tplt',
                         'cbh',
                         'deg0l',
                         'i10fg',
                         'ci',
                         'asn',
                         'rsn',
                         'sst',
                         'istl1',
                         'istl2',
                         'istl3',
                         'istl4',
                         'swvl1',
                         'swvl2',
                         'swvl3',
                         'swvl4',
                         'cape',
                         'lai_lv',
                         'lai_hv',
                         'u10n',
                         'v10n',
                         'sp',
                         'stl1',
                         'sd',
                         'chnk',
                         'msl',
                         'blh',
                         'tcc',
                         '10u',
                         '10v',
                         '2t',
                         '2d',
                         'stl2',
                         'stl3',
                         'lcc',
                         'mcc',
                         'hcc',
                         'src',
                         'ilspf',
                         'crr',
                         'lsrr',
                         'csfr',
                         'lssfr',
                         'iews',
                         'inss',
                         'ishf',
                         'ie',
                         'skt',
                         'stl4',
                         'tsn',
                         'fal',
                         'fsr',
                         'flsr',
                         '100u',
                         '100v',
                         'ptype',
                         'kx',
                         'totalx'
                         ]

        units = ['J kg**-1',
                 'm s**-1',
                 'K',
                 'm',
                 'K',
                 'K',
                 'dimensionless',
                 'K',
                 'm',
                 '(0 - 1)',
                 'm**-1',
                 '(0 - 1)',
                 'm**-1',
                 '(0 - 1)',
                 'm',
                 '(0 - 1)',
                 'm',
                 'm',
                 'm',
                 'm',
                 'm s**-1',
                 '(0 - 1)',
                 '(0 - 1)',
                 'kg m**-3',
                 'K',
                 'K',
                 'K',
                 'K',
                 'K',
                 'm**3 m**-3',
                 'm**3 m**-3',
                 'm**3 m**-3',
                 'm**3 m**-3',
                 'J kg**-1',
                 'm**2 m**-2',
                 'm**2 m**-2',
                 'm s**-1',
                 'm s**-1',
                 'Pa',
                 'K',
                 'm of water equivalent',
                 '~',
                 'Pa',
                 'm',
                 '(0 - 1)',
                 'm s**-1',
                 'm s**-1',
                 'K',
                 'K',
                 'K',
                 'K',
                 '(0 - 1)',
                 '(0 - 1)',
                 '(0 - 1)',
                 'm of water equivalent',
                 '(0 - 1)',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'N m**-2',
                 'N m**-2',
                 'W m**-2',
                 'kg m**-2 s**-1',
                 'K',
                 'K',
                 'K',
                 '(0 - 1)',
                 'm',
                 '~',
                 'm s**-1',
                 'm s**-1',
                 'code table (4.201)',
                 'K',
                 'K',
                 ]

        for name, abbreviation, unit, in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)

    def _append_table_3(self):

        # Table 3: surface and single level parameters: accumulations
        dataset_version = 'single-levels'
        time_invariant = False

        names = ['large_scale_precipitation_fraction',
                 'downward_uv_radiation_at_the_surface',
                 'boundary_layer_dissipation',
                 'surface_sensible_heat_flux',
                 'surface_latent_heat_flux',
                 'surface_solar_radiation_downwards',
                 'surface_thermal_radiation_downwards',
                 'surface_net_solar_radiation',
                 'surface_net_thermal_radiation',
                 'top_net_solar_radiation',
                 'top_net_thermal_radiation',
                 'eastward_turbulent_surface_stress',
                 'northward_turbulent_surface_stress',
                 'eastward_gravity_wave_surface_stress',
                 'northward_gravity_wave_surface_stress',
                 'gravity_wave_dissipation',
                 'top_net_solar_radiation_clear_sky',
                 'top_net_thermal_radiation_clear_sky',
                 'surface_net_solar_radiation_clear_sky',
                 'surface_net_thermal_radiation_clear_sky',
                 'toa_incident_solar_radiation',
                 'vertically_integrated_moisture_divergence',
                 'total_sky_direct_solar_radiation_at_surface',
                 'clear_sky_direct_solar_radiation_at_surface',
                 'surface_solar_radiation_downward_clear_sky',
                 'surface_thermal_radiation_downward_clear_sky',
                 'surface_runoff',
                 'sub_surface_runoff',
                 'snow_evaporation',
                 'snowmelt',
                 'large_scale_precipitation',
                 'convective_precipitation',
                 'snowfall',
                 'evaporation',
                 'runoff',
                 'total_precipitation',
                 'convective_snowfall',
                 'large_scale_snowfall',
                 'potential_evaporation']

        abbreviations = ['lspf',
                         'uvb',
                         'bld',
                         'sshf',
                         'slhf',
                         'ssrd',
                         'strd',
                         'ssr',
                         'str',
                         'tsr',
                         'ttr',
                         'ewss',
                         'nsss',
                         'lgws',
                         'mgws',
                         'gwd',
                         'tsrc',
                         'ttrc',
                         'ssrc',
                         'strc',
                         'tisr',
                         'vimd',
                         'fdir',
                         'cdir',
                         'ssrdc',
                         'strdc',
                         'sro',
                         'ssro',
                         'es',
                         'smlt',
                         'lsp',
                         'cp',
                         'sf',
                         'e',
                         'ro',
                         'tp',
                         'csf',
                         'lsf',
                         'pev',
                         ]

        units = ['s',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'N m**-2 s',
                 'N m**-2 s',
                 'N m**-2 s',
                 'N m**-2 s',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'kg m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'm',
                 'm',
                 'm of water equivalent',
                 'm of water equivalent',
                 'm',
                 'm',
                 'm of water equivalent',
                 'm of water equivalent',
                 'm',
                 'm',
                 'm of water equivalent',
                 'm of water equivalent',
                 'm',
                 ]

        for name, abbreviation, unit in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)

    def _append_table_4(self):

        # Table 4: surface and single level parameters: mean rates/fluxes
        dataset_version = 'single-levels'
        time_invariant = False

        names = ['mean_surface_runoff_rate',
                 'mean_sub_surface_runoff_rate',
                 'mean_snow_evaporation_rate',
                 'mean_snowmelt_rate',
                 'mean_large_scale_precipitation_fraction',
                 'mean_surface_downward_uv_radiation_flux',
                 'mean_large_scale_precipitation_rate',
                 'mean_convective_precipitation_rate',
                 'mean_snowfall_rate',
                 'mean_boundary_layer_dissipation',
                 'mean_surface_sensible_heat_flux',
                 'mean_surface_latent_heat_flux',
                 'mean_surface_downward_short_wave_radiation_flux',
                 'mean_surface_downward_long_wave_radiation_flux',
                 'mean_surface_net_short_wave_radiation_flux',
                 'mean_surface_net_long_wave_radiation_flux',
                 'mean_top_net_short_wave_radiation_flux',
                 'mean_top_net_long_wave_radiation_flux',
                 'mean_eastward_turbulent_surface_stress',
                 'mean_northward_turbulent_surface_stress',
                 'mean_evaporation_rate',
                 'mean_eastward_gravity_wave_surface_stress',
                 'mean_northward_gravity_wave_surface_stress',
                 'mean_gravity_wave_dissipation',
                 'mean_runoff_rate',
                 'mean_top_net_short_wave_radiation_flux_clear_sky',
                 'mean_top_net_long_wave_radiation_flux_clear_sky',
                 'mean_surface_net_short_wave_radiation_flux_clear_sky',
                 'mean_surface_net_long_wave_radiation_flux_clear_sky',
                 'mean_top_downward_short_wave_radiation_flux',
                 'mean_vertically_integrated_moisture_divergence',
                 'mean_total_precipitation_rate',
                 'mean_convective_snowfall_rate',
                 'mean_large_scale_snowfall_rate',
                 'mean_surface_direct_short_wave_radiation_flux',
                 'mean_surface_direct_short_wave_radiation_flux_clear_sky',
                 'mean_surface_downward_short_wave_radiation_flux_clear_sky',
                 'mean_surface_downward_long_wave_radiation_flux_clear_sky',
                 'mean_potential_evaporation_rate',
                 ]

        abbreviations = ['msror',
                         'mssror',
                         'mser',
                         'msmr',
                         'mlspf',
                         'msdwuvrf',
                         'mlspr',
                         'mcpr',
                         'msr',
                         'mbld',
                         'msshf',
                         'mslhf',
                         'msdwswrf',
                         'msdwlwrf',
                         'msnswrf',
                         'msnlwrf',
                         'mtnswrf',
                         'mtnlwrfv',
                         'metss',
                         'mntss',
                         'mer',
                         'megwss',
                         'mngwss',
                         'mgwd',
                         'mror',
                         'mtnswrfcs',
                         'mtnlwrfcs',
                         'msnswrfcs',
                         'msnlwrfcs',
                         'mtdwswrf',
                         'mvimd',
                         'mtpr',
                         'mcsr',
                         'mlssr',
                         'msdrswrf',
                         'msdrswrfcs',
                         'msdwswrfcs',
                         'msdwlwrfcs',
                         'mper',
                         ]

        units = ['kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'Proportion',
                 'W m**-2',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'N m**-2',
                 'N m**-2',
                 'kg m**-2 s**-1',
                 'N m**-2',
                 'N m**-2',
                 'W m**-2',
                 'kg m**-2 s**-1',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'W m**-2',
                 'kg m**-2 s**-1',
                 ]

        for name, abbreviation, unit in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)

    def _append_table_5(self):

        # Table 5: surface and single level parameters: minimum/maximum
        dataset_version = 'single-levels'
        time_invariant = False

        names = ['10m_wind_gust_since_previous_post_processing',
                 'maximum_2m_temperature_since_previous_post_processing',
                 'minimum_2m_temperature_since_previous_post_processing',
                 'maximum_total_precipitation_rate_since_previous_post_processing',
                 'minimum_total_precipitation_rate_since_previous_post_processing',
                 ]

        abbreviations = ['10fg',
                         'mx2t',
                         'mn2t',
                         'mxtpr',
                         'mntpr'
                         ]

        units = ['m s**-1',
                 'K',
                 'K',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1'
                 ]

        for name, abbreviation, unit in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)

    def _append_table_6(self):

        # Table 6: surface and single level parameters: vertical integrals and total column: instantaneous
        dataset_version = 'single-levels'
        time_invariant = False

        names = ['vertical_integral_of_mass_of_atmosphere',
                 'vertical_integral_of_temperature',
                 'vertical_integral_of_kinetic_energy',
                 'vertical_integral_of_thermal_energy',
                 'vertical_integral_of_potential_and_internal_energy',
                 'vertical_integral_of_potential_internal_and_latent_energy',
                 'vertical_integral_of_total_energy',
                 'vertical_integral_of_energy_conversion',
                 'vertical_integral_of_eastward_mass_flux',
                 'vertical_integral_of_northward_mass_flux',
                 'vertical_integral_of_eastward_kinetic_energy_flux',
                 'vertical_integral_of_northward_kinetic_energy_flux',
                 'vertical_integral_of_eastward_heat_flux',
                 'vertical_integral_of_northward_heat_flux',
                 'vertical_integral_of_eastward_water_vapour_flux',
                 'vertical_integral_of_northward_water_vapour_flux',
                 'vertical_integral_of_eastward_geopotential_flux',
                 'vertical_integral_of_northward_geopotential_flux',
                 'vertical_integral_of_eastward_total_energy_flux',
                 'vertical_integral_of_northward_total_energy_flux',
                 'vertical_integral_of_eastward_ozone_flux',
                 'vertical_integral_of_northward_ozone_flux',
                 'vertical_integral_of_divergence_of_cloud_liquid_water_flux',
                 'vertical_integral_of_divergence_of_cloud_frozen_water_flux',
                 'vertical_integral_of_divergence_of_mass_flux',
                 'vertical_integral_of_divergence_of_kinetic_energy_flux',
                 'vertical_integral_of_divergence_of_thermal_energy_flux',
                 'vertical_integral_of_divergence_of_moisture_flux',
                 'vertical_integral_of_divergence_of_geopotential_flux',
                 'vertical_integral_of_divergence_of_total_energy_flux',
                 'vertical_integral_of_divergence_of_ozone_flux',
                 'vertical_integral_of_eastward_cloud_liquid_water_flux',
                 'vertical_integral_of_northward_cloud_liquid_water_flux',
                 'vertical_integral_of_eastward_cloud_frozen_water_flux',
                 'vertical_integral_of_northward_cloud_frozen_water_flux',
                 'vertical_integral_of_mass_tendency',
                 'total_column_cloud_liquid_water',
                 'total_column_cloud_ice_water',
                 'total_column_supercooled_liquid_water',
                 'total_column_rain_water',
                 'total_column_snow_water',
                 'total_column_water',
                 'total_column_water_vapour',
                 'total_column_ozone'
                 ]

        abbreviations = ['vima',
                         'vit',
                         'vike',
                         'vithe',
                         'vipie',
                         'vipile',
                         'vitoe',
                         'viec',
                         'vimae',
                         'viman',
                         'vikee',
                         'viken',
                         'vithee',
                         'vithen',
                         'viwve',
                         'viwvn',
                         'vige',
                         'vign',
                         'vitoee',
                         'vitoen',
                         'vioze',
                         'viozn',
                         'vilwd',
                         'viiwd',
                         'vimad',
                         'viked',
                         'vithed',
                         'viwvd',
                         'vigd',
                         'vitoed',
                         'viozd',
                         'vilwe',
                         'vilwn',
                         'viiwe',
                         'viiwn',
                         'vimat',
                         'tclw',
                         'tciw',
                         'tcslw',
                         'tcrw',
                         'tcsw',
                         'tcw',
                         'tcwv',
                         'tco3',
                         ]

        units = ['kg m**-2',
                 'K kg m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'J m**-2',
                 'W m**-2',
                 'kg m**-1 s**-1',
                 'kg m**-1 s**-1',
                 'W m**-1',
                 'W m**-1',
                 'W m**-1',
                 'W m**-1',
                 'kg m**-1 s**-1',
                 'kg m**-1 s**-1',
                 'W m**-1',
                 'W m**-1',
                 'W m**-1',
                 'W m**-1',
                 'kg m**-1 s**-1',
                 'kg m**-1 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2 s**-1',
                 'W m**-2',
                 'W m**-2',
                 'kg m**-2 s**-1',
                 'W m**-2',
                 'W m**-2',
                 'kg m**-2 s**-1',
                 'kg m**-1 s**-1',
                 'kg m**-1 s**-1',
                 'kg m**-1 s**-1',
                 'kg m**-1 s**-1',
                 'kg m**-2 s**-1',
                 'kg m**-2',
                 'kg m**-2',
                 'kg m**-2',
                 'kg m**-2',
                 'kg m**-2',
                 'kg m**-2',
                 'kg m**-2',
                 'kg m**-2',
                 ]

        for name, abbreviation, unit in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)

    def _append_table_7(self):

        # Table 7: wave parameters: instantaneous
        dataset_version = 'single-levels'
        time_invariant = False

        names = ['significant_wave_height_of_first_swell_partition',
                 'mean_wave_direction_of_first_swell_partition',
                 'mean_wave_period_of_first_swell_partition',
                 'significant_wave_height_of_second_swell_partition',
                 'mean_wave_period_of_second_swell_partition',
                 'mean_wave_period_of_second_swell_partition',
                 'significant_wave_height_of_third_swell_partition',
                 'mean_wave_direction_of_third_swell_partition',
                 'mean_wave_period_of_third_swell_partition',
                 'wave_spectral_skewness',
                 'free_convective_velocity_over_the_oceans',
                 'air_density_over_the_oceans',
                 'normalized_energy_flux_into_waves',
                 'normalized_energy_flux_into_ocean',
                 'normalized_stress_into_ocean',
                 'u_component_stokes_drift',
                 'v_component_stokes_drift',
                 'period_corresponding_to_maximum_individual_wave_height',
                 'maximum_individual_wave_height',
                 'model_bathymetry',
                 'mean_wave_period_based_on_first_moment',
                 'mean_zero_crossing_wave_period',
                 'wave_spectral_directional_width',
                 'mean_wave_period_based_on_first_moment_for_wind_waves',
                 'mean_wave_period_based_on_second_moment_for_wind_waves',
                 'wave_spectral_directional_width_for_wind_waves',
                 'mean_wave_period_based_on_first_moment_for_swell',
                 'mean_wave_period_based_on_second_moment_for_wind_waves',
                 'wave_spectral_directional_width_for_swell',
                 'significant_height_of_combined_wind_waves_and_swell',
                 'mean_wave_direction',
                 'peak_wave_period',
                 'mean_wave_period',
                 'coefficient_of_drag_with_waves',
                 'significant_height_of_wind_waves',
                 'mean_direction_of_wind_waves',
                 'mean_period_of_wind_waves',
                 'significant_height_of_total_swell',
                 'mean_direction_of_total_swell',
                 'mean_period_of_total_swell',
                 'mean_square_slope_of_waves',
                 'ocean_surface_stress_equivalent_10m_neutral_wind_speed',
                 'ocean_surface_stress_equivalent_10m_neutral_wind_direction',
                 'wave_spectral_kurtosis',
                 'benjamin_feir_index',
                 'wave_spectral_peakedness',
                 ]

        abbreviations = ['swh1',
                         'mwd1',
                         'mwp1',
                         'swh2',
                         'mwd2',
                         'mwp2',
                         'swh3',
                         'mwd3',
                         'mwp3',
                         'wss',
                         'wstar',
                         'rhoao',
                         'phiaw',
                         'phioc',
                         'tauoc',
                         'ust',
                         'vst',
                         'tmax',
                         'hmax',
                         'wmb',
                         'mp1',
                         'mp2',
                         'wdw',
                         'p1ww',
                         'p2ww',
                         'dwww',
                         'p1ps',
                         'p2ps',
                         'dwps',
                         'swh',
                         'mwd',
                         'pp1d',
                         'mwp',
                         'cdww',
                         'shww',
                         'mdww',
                         'mpww',
                         'shts',
                         'mdts',
                         'mpts',
                         'msqs',
                         'wind',
                         'dwi',
                         'wsk',
                         'bfi',
                         'wsp',
                         ]

        units = ['m',
                 'degrees',
                 's',
                 'm',
                 'degrees',
                 's',
                 'm',
                 'degrees',
                 's',
                 'dimensionless',
                 'm s**-1',
                 'kg m**-3',
                 'dimensionless',
                 'dimensionless',
                 'dimensionless',
                 'm s**-1',
                 'm s**-1',
                 's',
                 'm',
                 'm',
                 's',
                 's',
                 'dimensionless',
                 's',
                 's',
                 'dimensionless',
                 's',
                 's',
                 'dimensionless',
                 'm',
                 'degrees',
                 's',
                 's',
                 'dimensionless',
                 'm',
                 'degrees',
                 's',
                 'm',
                 'degrees',
                 's',
                 'dimensionless',
                 'm s**-1',
                 'degrees',
                 'dimensionless',
                 'dimensionless',
                 'dimensionless',
                 ]

        for name, abbreviation, unit in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)

    def _append_table_9(self):

        # Table 9: pressure level parameters: instantaneous
        time_invariant = False
        dataset_version = 'pressure-levels'

        names = ['potential_vorticity',
                 'specific_rain_water_content',
                 'specific_snow_water_content',
                 'geopotential',
                 'temperature',
                 'u_component_of_wind',
                 'v_component_of_wind',
                 'specific_humidity',
                 'vertical_velocity',
                 'vorticity',
                 'divergence',
                 'relative_humidity',
                 'ozone_mass_mixing_ratio',
                 'specific_cloud_liquid_water_content',
                 'specific_cloud_ice_water_content',
                 'fraction_of_cloud_cover',
                 ]

        abbreviations = ['pv',
                         'crwc',
                         'cswc',
                         'z',
                         't',
                         'u',
                         'v',
                         'q',
                         'w',
                         'vo',
                         'd',
                         'r',
                         'o3',
                         'clwc',
                         'ciwc',
                         'cc',
                         ]

        units = ['K m**2 kg**-1 s**-1',
                 'kg kg**-1',
                 'kg kg**-1',
                 'm**2 s**-2',
                 'K',
                 'm s**-1',
                 'm s**-1',
                 'kg kg**-1',
                 'Pa s**-1',
                 's**-1',
                 's**-1',
                 '%',
                 'kg kg**-1',
                 'kg kg**-1',
                 'kg kg**-1',
                 '(0 - 1)',
                 ]

        for name, abbreviation, unit in zip(names, abbreviations, units):
            self.var_dic[name] = VariablesInfo(name, abbreviation, unit, dataset_version, time_invariant)


class VariablesInfo:
    '''
        A class to hold information about the ERA5 variables
    '''

    def __init__(self, name, abbreviation, units, dataset_version, time_invariant):
        '''
        Input args:
        ----------
        * name
            string of the name of the variables as required by the cdsapi call
        * abbreviation
            string of the abbreviation used for the variable
        * units
            string of the units for the hourly data
        * dataset_version
            string of the dataset version as stored on CDS,
            e.g. 'reanalysis-era5-pressure-levels'
        * time_invariant
            boolean of whether the dataset varies in time or is static
        '''
        self.name = name
        self.abbreviation = abbreviation
        self.units = units
        self.dataset_version = dataset_version
        self.time_invariant = time_invariant